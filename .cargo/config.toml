[target.riscv32imc-unknown-none-elf]
#[target.'cfg(all(target_arch = "riscv", target_os = "none"))']
runner = "espflash flash --monitor"
#runner = "probe-rs run --chip esp32c3" # to list chips, run `probe-rs chip list.`


[build]
rustflags = [
  "-C", "link-arg=-Tlinkall.x",
  "-C", "link-arg=-Trom_functions.x",
  #  "-C", "linker=flip-link",
  #  "-C", "link-arg=-Tlink.x",
  #  "-C", "link-arg=-Tdefmt.x",
  #  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  #  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  #  "-C", "link-arg=--nmagic",

  # Required to obtain backtraces (e.g. when using the "esp-backtrace" crate.)
  # NOTE: May negatively impact performance of produced code
  "-C", "force-frame-pointers",

  # comment the cfgs below if you do _not_ wish to emulate atomics.
  # enable the atomic codegen option for RISCV
  "-C", "target-feature=+a",
  # tell the core library have atomics even though it's not specified in the target definition
  "--cfg", "target_has_atomic_load_store",
  "--cfg", 'target_has_atomic_load_store="8"',
  "--cfg", 'target_has_atomic_load_store="16"',
  "--cfg", 'target_has_atomic_load_store="32"',
  "--cfg", 'target_has_atomic_load_store="ptr"',
  # enable cas
  "--cfg", "target_has_atomic",
  "--cfg", 'target_has_atomic="8"',
  "--cfg", 'target_has_atomic="16"',
  "--cfg", 'target_has_atomic="32"',
  "--cfg", 'target_has_atomic="ptr"',
]

target = "riscv32imc-unknown-none-elf"

#[unstable]
#build-std = ["core"]


[alias]
rb = "run --bin"
rrb = "run --release --bin"
rr = "run --release"